#!/bin/bash

readonly caskroom_online='https://github.com/caskroom'
readonly caskroom_repos_dir='/tmp/caskroom_repos'
readonly caskroom_repos=(homebrew-eid homebrew-fonts homebrew-versions homebrew-cask)
readonly curl_flags=(--silent --location --header 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36')
outdated_appcasts_issue_number=''
outdated_appcasts=()
inaccessible_appcasts=()

if [[ ! $(which 'ghi') ]] || ! security find-internet-password -s github.com -l 'ghi token' &> /dev/null; then
  echo -e "$(tput setaf 1)
    This script requires 'ghi' installed and configured.
    If you have [Homebrew](http://brew.sh), you can install it with 'brew install ghi'.
    To configure it, run 'ghi config --auth <username>'. Your Github password will be required, but is never stored.
  $(tput sgr0)" | sed -E 's/ {4}//' >&2
  exit 1
fi

function message {
  echo "${1}"
}

function error_message {
  local error_message="${1}"

  echo -e "\n$(tput setaf 1)$(message "${error_message}")$(tput sgr0)\n"
}

function abort {
  error_message "You decided to abort. Closing issue…"
  ghi close "${outdated_appcasts_issue_number}"
  exit 1
}

trap 'abort' SIGINT # cleanup if aborted with ⌃C

function go_to_repos_dir {
  [[ ! -d "${caskroom_repos_dir}" ]] && mkdir -p "${caskroom_repos_dir}"
  cd "${caskroom_repos_dir}" || exit 1
}

function go_to_repo_and_update {
  local repo_name repo_dir casks_dir

  repo_name="${1}"
  repo_dir="${caskroom_repos_dir}/${repo_name}"
  casks_dir="${repo_dir}/Casks"

  if [[ ! -d "${repo_dir}" ]]; then
    go_to_repos_dir

    message "Cloning ${repo_name}…"
    git clone "${caskroom_online}/${repo_name}.git" --quiet

    cd "${casks_dir}" || exit 1
  else
    cd "${casks_dir}" || exit 1

    message "Updating ${repo_name}…"
    git pull --rebase origin master --quiet
  fi
}

function create_outdated_appcasts_issue {
  local message_text

  message_text="$(echo "[machine-generated WIP] List of outdated casks
    This issue is being auto-generated with [\`find_outdated_appcasts\`](${caskroom_online}/homebrew-cask/blob/master/developer/bin/find_outdated_appcasts).
  " | sed -E 's/^ {4}//')"

  ghi open --claim --label 'outdated appcast' --message "${message_text}" 1>/dev/null
  set_outdated_appcasts_issue_number
}

function set_outdated_appcasts_issue_number {
  outdated_appcasts_issue_number="$(ghi list --state open --no-pulls --label 'outdated appcast' | tail -1 | perl -pe 's/^\s+(\d+).*/\1/')"
}

function exists_outdated_appcast_issue {
  [[ "$(ghi list --state open --no-pulls --label 'outdated appcast' | tail -1)" != 'None.' ]]
}

function is_outdated_appcasts_issue_assigned {
  [[ "$(ghi show "${outdated_appcasts_issue_number}" | grep 'is assigned.')" ]]
}

function issue_assignment {
  local assignment_type issue_number

  assignment_type="${1}"
  issue_number="${2}"

  if [[ "${assignment_type}" == 'unassign' ]]; then
    ghi assign --no-assignee "${issue_number}" 1>/dev/null
  elif [[ "${assignment_type}" == 'assign_self' ]]; then
    ghi assign "${issue_number}" 1>/dev/null
  fi
}

function report_outdated_appcasts {
  local repo_name message_intro message_text

  repo_name="${1}"

  if [[ "${#outdated_appcasts[@]}" -eq 0 ]]; then
    ghi close "${outdated_appcasts_issue_number}" 1>/dev/null
    message 'There were no outdated appcasts.'
    return
  fi

  message_text=$(echo 'List of outdated appcasts' && printf '%s\n' "${outdated_appcasts[@]}")
  ghi edit --message "${message_text}" "${outdated_appcasts_issue_number}" 1>/dev/null
  message "Issue for outdated appcast: ${caskroom_online}/${repo_name}/issues/${outdated_appcasts_issue_number}."

  issue_assignment unassign "${outdated_appcasts_issue_number}"
  outdated_appcasts=()
}

function report_inaccessible_appcasts {
  local repo_name message_intro message_text issue_number

  repo_name="${1}"

  [[ "${#inaccessible_appcasts[@]}" -eq 0 ]] && return # abort if there are no inaccessible appcasts

  message_intro="$(echo "List of inaccessible appcasts
    This issue was auto-generated by [\`find_outdated_appcasts\`](${caskroom_online}/homebrew-cask/blob/master/developer/bin/find_outdated_appcasts). It shows appcasts that for some reason were inaccessible at the time, and might be no longer functional. These should be manually checked and fixed or removed, as appropriate.

    Casks with inaccessible appcasts:
  " | sed -E 's/^ {4}//')"
  message_text=$(printf '%s\n' "${message_intro}" "${inaccessible_appcasts[@]}")
  issue_number=$(ghi open --message "${message_text}" | head -1 | perl -pe 's/^#(\d+): .*/\1/')
  message "Issue for inaccessible appcasts: ${caskroom_online}/${repo_name}/issues/${issue_number}."

  inaccessible_appcasts=()
}

function add_outdated_appcast {
  local repo_name cask_name cask_url cask_version appcast_url

  repo_name="${1}"
  cask_name="${2}"
  cask_url="${caskroom_online}/${repo_name}/blob/master/Casks/${cask_name}.rb"
  cask_version="${3}"
  appcast_url="${4}"

  outdated_appcasts+=("+ [${cask_name}](${cask_url}) • ${cask_version} • [appcast](${appcast_url})")
}

function add_inaccessible_appcast {
  local repo_name cask_name cask_url

  repo_name="${1}"
  cask_name="${2}"
  cask_url="${caskroom_online}/${repo_name}/blob/master/Casks/${cask_name}.rb"

  inaccessible_appcasts+=("+ [${cask_name}](${cask_url})")
}

function is_appcast_available {
  local appcast_url

  appcast_url="${1}"

  http_status="$(curl "${curl_flags[@]}" --head --write-out '%{http_code}' "${appcast_url}" -o '/dev/null')"

  [[ "${http_status}" == 200 ]]
}

function find_outdated_appcasts {
  local repo_name cask_name appcast_url current_checkpoint new_checkpoint cask_version

  repo_name="${1}"

  for cask_file in ./*; do
    appcast_url="$(brew cask _stanza appcast "${cask_file}")"
    [[ -z "${appcast_url}" ]] && continue # skip early if there is no appcast

    cask_name="$(basename "${cask_file%.*}")"

    message "Verifying appcast checkpoint for ${cask_name}…"

    if is_appcast_available "${appcast_url}"; then
      current_checkpoint="$(brew cask _stanza --yaml appcast "${cask_file}" | grep '^- :checkpoint' | awk '{print $3}')"
      new_checkpoint="$(curl "${curl_flags[@]}" --compressed "${appcast_url}" | sed 's|<pubDate>[^<]*</pubDate>||g' | shasum --algorithm 256 | awk '{ print $1 }')"
    else
      message "There was an error checking the appcast for ${cask_name}."
      add_inaccessible_appcast "${repo_name}" "${cask_name}"
      continue
    fi

    if [[ "${current_checkpoint}" != "${new_checkpoint}" ]]; then
      cask_version="$(brew cask _stanza version "${cask_file}")"

      message "${cask_name} is outdated. Adding to list…"
      add_outdated_appcast "${repo_name}" "${cask_name}" "${cask_version}" "${appcast_url}"
    fi
  done
}

for repo in "${caskroom_repos[@]}"; do
  go_to_repo_and_update "${repo}"

  if exists_outdated_appcast_issue; then
    set_outdated_appcasts_issue_number
    if is_outdated_appcasts_issue_assigned; then
      message 'Another maintainer is already working on this for this repo. Trying next one…'
    else
      error_message 'An issue generated with `find_outdated_appcasts` is still open. You should run `merge_outdated_appcasts` instead.'
    fi
    continue
  else
    create_outdated_appcasts_issue "${repo}"
  fi

  find_outdated_appcasts "${repo}"
  report_outdated_appcasts "${repo}"
  report_inaccessible_appcasts "${repo}"
done
