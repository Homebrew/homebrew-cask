#!/bin/bash
#
# production_brew_cask
#

set -e;               # exit on any uncaught error
set +o histexpand;    # don't expand history expressions
shopt -s nocasematch; # case-insensitive regular expressions

cd_to_project_root () {
    local script_dir="$(/usr/bin/dirname $0)"
    cd "$script_dir"
    local git_root="$(git rev-parse --show-toplevel)"
    if [[ -z "$git_root" ]]; then
        printf "Could not find git project root"
        exit 1;
    fi
    cd "$git_root"
}

cd_to_version_dir () {
    local cellar_dir="$1"
    local version_dir="$2"
    if [[ -z "$version_dir" ]]; then
        printf "Can't get version dir under $cellar_dir/\n";
        exit 1;
    fi
    cd "$cellar_dir/$version_dir"
}

remove_dev_links () {
    local tap_dir="$1"
    /bin/rm rubylib Casks
    /bin/mv production_rubylib rubylib
    /bin/mv production_Casks   Casks
    cd "$tap_dir"
    /bin/rm lib Casks
    /bin/mv production_lib   lib
    /bin/mv production_Casks Casks
}

_production_brew_cask () {

    # configurable
    local tap_subdir="Library/Taps/phinze-cask"

    # initialization
    cd_to_project_root;
    local git_root="$(pwd)"
    local brew_prefix="$(brew --prefix)"
    local cellar_dir="$brew_prefix/Cellar/brew-cask"
    local version_dir="$(/bin/ls "$cellar_dir/" | /usr/bin/sort | /usr/bin/tail -1)"
    local tap_dir="$brew_prefix/$tap_subdir"

    # sanity check
    if [[ "$(/usr/bin/stat -L -f '%i' "$tap_dir")" -eq "$(/usr/bin/stat -L -f '%i' "$git_root")" ]]; then
        printf "\nERROR: run this script in your private repo, not inside Homebrew.\n"
        exit 1;
    fi

    # action
    cd_to_version_dir "$cellar_dir" "$version_dir";
    if [[ -e "production_rubylib" ]]; then
        remove_dev_links "$tap_dir";
        printf "brew-cask is now in production mode\n"
        printf "It is safe to run 'brew update'\n"
    else
        printf "brew-cask is already set up for production\n"
        exit 1
    fi

}

if [[ $1 =~ ^-+h(elp)?$ ]]; then
    printf "production_brew_cask

Undo all symlinks created by 'develop_brew_cask' so that
the 'brew cask' command will use only released code within
Homebrew.

After running this command it is safe to run 'brew update'.

"
    exit
fi

_production_brew_cask "$@";

#
