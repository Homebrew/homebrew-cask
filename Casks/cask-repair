#!/bin/bash

readonly program="$(basename "${0}")"
readonly submit_pr_to='caskroom:master'
readonly user_agent=(--user-agent 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36')
remote_pull='upstream' # use 'upstream' as default remote to pull from
remote_push='origin' # use 'origin' as default remote to push to
show_home='false' # by default, do not open the cask's homepage
show_appcast='false' # by default, do not open the cask's appcast
warning_messages=()

# check if 'hub' is installed and configured
if [[ ! $(which 'hub') ]] || [[ -z "${GITHUB_TOKEN}" && ! $(grep 'oauth_token:' "${HOME}/.config/hub" 2>/dev/null) ]]; then
  echo -e "$(tput setaf 1)
    This script requires 'hub' installed and configured.
    If you have [Homebrew](http://brew.sh), you can install it with 'brew install hub'.
    To configure it, run 'cd $(brew --repository) && hub issue'. Your Github password will be required, but is never stored.
  $(tput sgr0)" | sed -E 's/ {4}//' >&2
  exit 1
fi

syntax_error() {
  echo "${program}: ${1}" >&2
  echo "Try \`${program} --help\` for more information." >&2
  exit 1
}

usage() {
  echo "
    usage: ${program} [options] <cask_name>

    options:
      -l <remote>, --pull <remote>   Use to specify a remote to pull from (defaults to 'upstream').
      -p <remote>, --push <remote>   Use to specify a remote to push to (defaults to 'origin').
      -o, --open-home                Open the homepage for the given cask.
      -a, --open-appcast             Open the appcast for the given cask.
      -v, --cask-version             Give a version directly, instead of being prompted for it.
      -u, --cask-url                 Give a URL directly, instead of being prompted for it.
      -e, --edit-cask                Opens cask for editing before trying first download.
      -c, --closes-issue <number>    Adds 'Closes #<number>.' to the commit message.
      -b, --blind-submit             Submit cask without asking for confirmation, if there are no errors.
      -d, --delete-branches          Deletes all local and remote branches named like cask-repair_update-<word>.
      -h, --help                     Show this help.
  " | sed -E 's/^ {4}//'
}

# available flags
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -l | --pull)
      remote_pull="${2}"
      shift
      ;;
    -p | --push)
      remote_push="${2}"
      shift
      ;;
    -o | --open-home)
      show_home='true'
      ;;
    -a | --open-appcast)
      show_appcast='true'
      ;;
    -v | --cask-version)
      given_cask_version="${2}"
      shift
      ;;
    -u | --cask-url)
      given_cask_url="${2}"
      shift
      ;;
    -e | --edit-cask)
      edit_on_start='true'
      ;;
    -c | --closes-issue)
      issue_to_close="${2}"
      shift
      ;;
    -b | --blind-submit)
      cask_updated='blindly'
      ;;
    -d | --delete-branches)
      can_run_without_arguments='true'
      delete_created_branches='true'
      ;;
    -*)
      syntax_error "unrecognized option: ${1}"
      ;;
    *)
      break
      ;;
  esac
  shift
done

# define function to get HTTP status codes of URLs
http_status() {
  local url follow_redirects

  url="${1}"
  [[ "${2}" == 'follow_redirects' ]] && follow_redirects='--location' || follow_redirects='--no-location'

  curl --silent --head "${follow_redirects}" "${user_agent[@]}" --write-out '%{http_code}' "${url}" -o '/dev/null'
}

# define function to check if a given string contains ruby-style interpolation
has_interpolation() {
  [[ "${1}" =~ \#{version.*} ]] && echo 'true' || echo 'false'
}

# define function to check if cask is using :latest version
is_version_latest() {
  [[ "$(brew cask _stanza version ${cask_file})" == 'latest' ]] && echo 'true' || echo 'false'
}

# define function to check for block url
has_block_url() {
  [[ $(grep 'url do' "${cask_file}") ]] && echo 'true' || echo 'false'
}

# define function to modify stanzas
modify_stanza() {
  stanza_to_modify="${1}"
  new_stanza_value="${2}"

  perl -0777 -i -e'
    $stanza_to_modify = shift(@ARGV);
    $new_stanza_value = shift(@ARGV);
    print <> =~ s|\A.*^\s*\Q$stanza_to_modify\E\s\K[^\n]*|$new_stanza_value|smr;
  ' "${stanza_to_modify}" "${new_stanza_value}" "${cask_file}"
}

# define function to modify url with correct quotes
modify_url() {
  local url="${1}"

  [[ $(has_interpolation "${url}") == 'true' ]] && modify_stanza 'url' "\"${url}\"" || modify_stanza 'url' "'${url}'" # use appropriate quotes depending on if a url with interpolation was given
}

# define function to get appcast url and existence
cask_appcast_info() {
  cask_appcast_url=$(brew cask _stanza appcast "${cask_file}")
  [[ -n "${cask_appcast_url}" ]] && cask_has_appcast='true' || cask_has_appcast='false'
}

# define function to check and modify sha256
sha_change() {
  local cask_sha_deliberatedly_unchecked downloaded_file package_sha

  cask_sha_deliberatedly_unchecked=$(grep 'sha256 :no_check # required as upstream package is updated in-place' "${cask_file}")
  [[ -n "${cask_sha_deliberatedly_unchecked}" ]] && return # abort function if cask deliberate uses ':no_check' with a version

  # set sha256 as :no_check tempoparily, to prevent mismatch errors when fetching
  modify_stanza 'sha256' ':no_check'

  brew cask fetch --force "${cask_file}"
  downloaded_file=$(brew cask fetch "${cask_file}" 2>/dev/null | tail -1 | sed 's/==> Success! Downloaded to -> //')
  package_sha=$(shasum --algorithm 256 "${downloaded_file}" | awk '{ print $1 }')

  modify_stanza 'sha256' "'${package_sha}'"
}

# define function to check and modify appcast's checkpoint sha256
appcast_checkpoint_change() {
  local cask_appcast_checkpoint cask_appcast_status

  cask_appcast_info
  [[ "${cask_has_appcast}" == 'false' ]] && return # abort function if cask does not have an appcast

  cask_appcast_status=$(http_status "${cask_appcast_url}" 'no_follow_redirects')
  [[ "${cask_appcast_status}" != '200' ]] && add_warning warning "appcast is probably incorrect, as a non-200 (OK) HTTP response code was returned (${cask_appcast_status})"

  cask_appcast_checkpoint=$(curl --silent --compressed --location "${user_agent[@]}" "${cask_appcast_url}" | /usr/bin/sed 's|<pubDate>[^<]*</pubDate>||g' | shasum --algorithm 256 | awk '{ print $1 }')

  modify_stanza 'checkpoint:' "'${cask_appcast_checkpoint}'"
}

delete_created_branches() {
  local local_branches remote_branches

  # delete local branches
  local_branches=$(git branch --all | grep --extended-regexp '^ *cask-repair_update-.+$' | perl -pe 's|^ *||;s|\n| |')
  [[ -n "${local_branches}" ]] && git branch -D ${local_branches}

  # delete remote branches
  git fetch --prune "${remote_push}"
  remote_branches=$(git branch --all | grep --extended-regexp "remotes/${remote_push}/cask-repair_update-.+$" | perl -pe 's|.*/||;s|\n| |')
  [[ -n "${remote_branches}" ]] && git push "${remote_push}" --delete ${remote_branches}
}

# define function to quickly call both sha changing functions
update_cask_shas() {
  sha_change
  appcast_checkpoint_change
}

# define function to open cask in appropriate editor
edit_cask() {
  [[ -n "${EDITOR}" ]] && eval "${EDITOR}" "${cask_file}" || open -W "${cask_file}"
}

# define function to add warnings to be shown on review
add_warning() {
  local message severity color

  severity="${1}"
  message="${2}"

  [[ "${severity}" == 'warning' ]] && color="$(tput setaf 3)•$(tput sgr0)" || color="$(tput setaf 1)•$(tput sgr0)"

  warning_messages+=("${color} ${message}")
}

# define function to show warnings if there are any
show_warnings() {
  if [[ "${#warning_messages[@]}" -gt 0 ]]; then
    printf '%s\n' "${warning_messages[@]}"
    divide
  fi
}

clear_warnings() {
  warning_messages=()
}

# define abort function, that will reset the state
finish() {
  git reset HEAD --hard --quiet
  git checkout master --quiet
  git branch -D "${cask_branch}" --quiet

  # show message
  if [[ "${1}" == 'abort' ]]; then
    echo -e "\n$(tput setaf 1)${2}$(tput sgr0)\n"
    exit 1
  elif [[ "${1}" == 'success' ]]; then
    echo -e "\n$(tput setaf 2)Submitted (${2})$(tput sgr0)\n"
    exit 0
  fi
}

# cleanup if aborted with ⌃C
trap 'finish abort "You aborted"' SIGINT

# define divider function
divide() {
  if [[ $(which hr) ]]; then
    hr -
  else
    echo '--------------------'
  fi
}

# exit if no argument or more than one argument was given
if [[ -z "${1}" ]] && [[ "${can_run_without_arguments}" != 'true' ]]; then
  usage
  exit 1
fi

# exit if not inside a 'homebrew-*/Casks' directory
casks_dir=$(pwd | perl -ne 'print m{homebrew-[^/]+/Casks}')
if [[ -z "${casks_dir}" ]]; then
  echo -e "\n$(tput setaf 1)You need to be inside a '/homebrew-*/Casks' directory$(tput sgr0)\n"
  exit 1
fi

if [[ "${delete_created_branches}" == 'true' ]]; then
  delete_created_branches
  exit 0
fi

[[ -n "${2}" ]] && finish abort 'You can only give one cask argument per run'

# clean the cask's name, and check if it is valid
cask_name="${1%.rb}" # remove '.rb' extension, if present
cask_file="./${cask_name}.rb"
cask_branch="cask-repair_update-${cask_name}"
[[ ! -f "${cask_file}" ]] && finish abort 'There is no such cask'

# initial tasks
git checkout master --quiet
git pull --rebase "${remote_pull}" master --quiet
git checkout -b "${cask_branch}" --quiet

# open home and appcast
[[ "${show_home}" == 'true' ]] && brew cask home "${cask_file}"

cask_appcast_info
if [[ "${cask_has_appcast}" == 'true' ]] && [[ "${show_appcast}" == 'true' ]]; then
  [[ "${cask_appcast_url}" =~ ^https://github.com.*releases.atom$ ]] && open "${cask_appcast_url%.*}" || open "${cask_appcast_url}" # if appcast is from github releases, open the page instead of the feed
fi

# show cask's current state
divide
cat "${cask_file}"
divide

# set cask version
if [[ -z "${given_cask_version}" ]]; then
  read -p $'Type the new version (or leave blank to use the current one)\n> ' given_cask_version # ask for cask version, if not given previously

  [[ -z "${given_cask_version}" ]] && given_cask_version=$(brew cask _stanza version "${cask_file}")
fi

if [[ "${given_cask_version}" == ':latest' ]] || [[ "${given_cask_version}" == 'latest' ]]; then # allow both ':latest' and 'latest' to be given
  modify_stanza 'version' ':latest'
else
  modify_stanza 'version' "'${given_cask_version}'"
fi

if [[ -n "${given_cask_url}" ]]; then
  [[ $(has_block_url) == 'false' ]] && modify_url "${given_cask_url}" || echo 'Cask has block url, so it can only be modified manually (choose "e" when prompted)'
else
  # if url does not use interpolation and is not block, ask for it
  cask_bare_url=$(grep "url ['\"].*['\"]" "${cask_file}" | sed -E "s|.*url ['\"](.*)['\"].*|\1|")
  if [[ $(has_interpolation "${cask_bare_url}") == 'false' ]] && [[ $(has_block_url) == 'false' ]]; then
    read -p $'Paste the new URL (or leave blank to use the current one)\n> ' given_cask_url

    [[ -z "${given_cask_url}" ]] && given_cask_url=$(brew cask _stanza url "${cask_file}") || modify_url "${given_cask_url}"
  fi

  cask_url=$(brew cask _stanza url "${cask_file}")

  # check if the URL sends a 200 HTTP code, else abort
  cask_url_status=$(http_status "${cask_url}" 'follow_redirects')

  [[ "${cask_url}" =~ (github.com|bitbucket.org) ]] && cask_url_status='200' # if the download URL is from github or bitbucket, fake the status code

  if [[ "${cask_url_status}" != '200' ]]; then
    if [[ -z "${cask_url_status}" ]]; then
      add_warning warning 'you need to use a valid URL'
    else
      add_warning warning "url is probably incorrect, as a non-200 (OK) HTTP response code was returned (${cask_url_status})"
    fi
  fi
fi

[[ "${edit_on_start}" == 'true' ]] && edit_cask

[[ "$(is_version_latest)" == 'false' ]] && update_cask_shas || modify_stanza 'sha256' ':no_check' # calculate new sha256 values

# check if everything is alright, else abort
[[ -z "${cask_updated}" ]] && cask_updated='false'
until [[ "${cask_updated}" =~ ^[yne]$ ]]; do
  # fix style errors and check for style and audit errors
  style_message=$(brew cask style --fix "${cask_file}" 2>/dev/null)
  style_result="$?"
  [[ "${style_result}" -ne 0 ]] && add_warning error "${style_message}"

  audit_message=$(brew cask audit "${cask_file}" 2>/dev/null)
  audit_result="$?"
  [[ "${audit_result}" -ne 0 ]] && add_warning error "${audit_message}"

  git --no-pager diff
  divide
  show_warnings

  if [[ "${cask_updated}" == 'blindly' ]] && [[ "${#warning_messages[@]}" -eq 0 ]]; then
    cask_updated='y'
  else
    read -n1 -p 'Is everything correct? You can also make further manual edits (y/n/e) ' cask_updated
    echo # add an empty line
  fi

  if [[ "${cask_updated}" == 'y' ]]; then
    if [[ "${style_result}" -ne 0 ]] || [[ "${audit_result}" -ne 0 ]]; then
      cask_updated='false'
    else
      echo 'Submitting…'
      break
    fi
  elif [[ "${cask_updated}" == 'e' ]]; then
    edit_cask
    [[ "$(is_version_latest)" == 'false' ]] && update_cask_shas # recheck sha256 values if version isn't :latest
    cask_updated='false'
    clear_warnings
  elif [[ "${cask_updated}" == 'n' ]]; then
    finish abort 'You decided to abort'
  fi
done

# grab version as it ended up in the cask
cask_version="$(brew cask _stanza version ${cask_file})"

# commit, push, submit pull request, clean
readonly commit_message="Update ${cask_name} to ${cask_version}"
readonly hub_message="$(echo -e "${commit_message}\n\n#### Checklist\n\n- [x] The commit message includes the cask’s name and version.\n- [x] \`brew cask audit --download {{cask_file}}\` is error-free.\n- [x] \`brew cask style --fix {{cask_file}}\` left no offenses.")"

git commit "${cask_file}" --message "${commit_message}" --quiet
git push --force "${remote_push}" "${cask_branch}" --quiet
git branch --set-upstream-to "${remote_push}/${cask_branch}" --quiet # needed as workaround for hub to work with certain .gitconfig options to push default: https://github.com/github/hub/issues/789#issuecomment-72553866; after that issue is fixed, this line may likely be completely removed
[[ -z "${issue_to_close}" ]] && pr_link=$(hub pull-request -b "${submit_pr_to}" -m "${hub_message}") || pr_link=$(hub pull-request -b "${submit_pr_to}" -m "$(echo -e "${hub_message}\n\n---\n\nCloses #${issue_to_close}.")")
[[ -n "${pr_link}" ]] && finish success "${pr_link}" || finish abort 'There was an error submitting the pull request. Have you forked the repo and made sure the pull and push remotes exist?'
